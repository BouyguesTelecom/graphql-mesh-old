diff --git a/node_modules/@graphql-tools/executor/cjs/execution/execute.js b/node_modules/@graphql-tools/executor/cjs/execution/execute.js
old mode 100644
new mode 100755
index 791e3df..2ccc98a
--- a/node_modules/@graphql-tools/executor/cjs/execution/execute.js
+++ b/node_modules/@graphql-tools/executor/cjs/execution/execute.js
@@ -418,7 +418,7 @@ function completeValue(exeContext, returnType, fieldNodes, info, path, result, a
     if ((0, graphql_1.isNonNullType)(returnType)) {
         const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result, asyncPayloadRecord);
         if (completed === null) {
-            throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);
+            console.error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);
         }
         return completed;
     }
@@ -629,7 +629,7 @@ function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, r
 }
 function ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {
     if (runtimeTypeName == null) {
-        throw (0, utils_1.createGraphQLError)(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}". Either the "${returnType.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`, { nodes: fieldNodes });
+        runtimeTypeName = returnType.astNode.directives[0].arguments[1].value.value.split(':')[0].replace('{','').replaceAll('"','')
     }
     // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`
     // TODO: remove in 17.0.0 release
@@ -640,7 +640,11 @@ function ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNo
         throw (0, utils_1.createGraphQLError)(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}" with ` +
             `value ${(0, utils_1.inspect)(result)}, received "${(0, utils_1.inspect)(runtimeTypeName)}".`);
     }
-    const runtimeType = exeContext.schema.getType(runtimeTypeName);
+    // Add the functionality to resolve a type from the mapping argument of a discriminator directive
+    const mappedTypes = JSON.parse(returnType.astNode.directives
+      .find(d => d.name.value === "discriminator").arguments
+      .find(a => a.name.value === "mapping").value.value)
+    const runtimeType = Object.keys(mappedTypes).includes(runtimeTypeName) ? exeContext.schema.getType(mappedTypes[runtimeTypeName]) : exeContext.schema.getType(runtimeTypeName);
     if (runtimeType == null) {
         throw (0, utils_1.createGraphQLError)(`Abstract type "${returnType.name}" was resolved to a type "${runtimeTypeName}" that does not exist inside the schema.`, { nodes: fieldNodes });
     }
