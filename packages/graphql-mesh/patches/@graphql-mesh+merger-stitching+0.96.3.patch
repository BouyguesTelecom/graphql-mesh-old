diff --git a/node_modules/@graphql-mesh/merger-stitching/cjs/index.js b/node_modules/@graphql-mesh/merger-stitching/cjs/index.js
index 381e473..3a4db3d 100644
--- a/node_modules/@graphql-mesh/merger-stitching/cjs/index.js
+++ b/node_modules/@graphql-mesh/merger-stitching/cjs/index.js
@@ -1,5 +1,17 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
+function sortKeys(dict) {
+    var sorted = [];
+    for(var key in dict) {
+        sorted[sorted.length] = key;
+    }
+    sorted.sort();
+    var tempDict = {};
+    for(var i = 0; i < sorted.length; i++) {
+        tempDict[sorted[i]] = dict[sorted[i]];
+    }
+    return tempDict;
+}
 const stitch_1 = require("@graphql-tools/stitch");
 class StitchingMerger {
     constructor(options) {
@@ -42,6 +54,21 @@ class StitchingMerger {
                 },
             }),
         });
+
+        // Sort fields alphabetically
+        Object.keys(unifiedSchema._typeMap).forEach((type) => {
+            unifiedSchema._typeMap[type]._fields = sortKeys(unifiedSchema._typeMap[type]._fields);
+        });
+        // Sort query and mutation inputs alphabetically
+        ['Query', 'Mutation'].forEach((operation) => {
+            const fields = unifiedSchema._typeMap[operation]._fields;
+            Object.keys(fields).map(field => {
+                if (fields[field].args) {
+                    fields[field].args.sort((a, b) => a.name.localeCompare(b.name));
+                }
+            });
+        });
+
         return {
             schema: unifiedSchema,
         };
