diff --git a/node_modules/graphql-jit/dist/execution.js b/node_modules/graphql-jit/dist/execution.js
index ee4f545..469af2f 100644
--- a/node_modules/graphql-jit/dist/execution.js
+++ b/node_modules/graphql-jit/dist/execution.js
@@ -348,8 +348,10 @@ function compileType(context, parentType, type, fieldNodes, originPaths, destina
     let errorDestination;
     if ((0, graphql_1.isNonNullType)(type)) {
         type = type.ofType;
+        // FIXME: This is a hack for not handling error when type is notNull but the return value is null
         const nullErrorStr = `"Cannot return null for non-nullable field ${parentType.name}.${getFieldNodesName(fieldNodes)}."`;
-        body += `(${GLOBAL_NULL_ERRORS_NAME}.push(${createErrorObject(context, fieldNodes, previousPath, nullErrorStr)}), null) :`;
+        body += `(console.error(${nullErrorStr}), null) : `;
+        // body += `(${GLOBAL_NULL_ERRORS_NAME}.push(${createErrorObject(context, fieldNodes, previousPath, nullErrorStr)}), null) :`;
         errorDestination = GLOBAL_NULL_ERRORS_NAME;
     }
     else {
@@ -910,6 +912,11 @@ function defaultResolveTypeFn(value, contextValue, info, abstractType) {
                 return type.name;
             }
         }
+        else {
+            if (value.type.toUpperCase() === type.name.toUpperCase()) {
+                return type.name
+            }
+        }
     }
     throw new Error(`Could not resolve the object type in possible types of ${abstractType.name} for the value: ` +
         inspect(value));
