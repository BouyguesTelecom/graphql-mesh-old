// Generated from src/main/antlr/SPL.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { CharStream } from 'antlr4ts/CharStream'
import { Lexer } from 'antlr4ts/Lexer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

import * as Utils from 'antlr4ts/misc/Utils'

export class SPLLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly ORDER = 13
  public static readonly OPERATOR = 14
  public static readonly PRIO_OPERATION = 15
  public static readonly OPERATION = 16
  public static readonly XOR_OPERATOR = 17
  public static readonly OR_OPERATOR = 18
  public static readonly AND_OPERATOR = 19
  public static readonly COMPARATOR = 20
  public static readonly STRING = 21
  public static readonly SINGLE_STRING = 22
  public static readonly DOUBLE_STRING = 23
  public static readonly BOOL = 24
  public static readonly NULL = 25
  public static readonly FUNCTION_NAME = 26
  public static readonly IDENTIFIER = 27
  public static readonly DATE = 28
  public static readonly INTEGER = 29
  public static readonly FLOAT = 30
  public static readonly WS = 31
  public static readonly COMMENT = 32

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'ORDER',
    'OPERATOR',
    'PRIO_OPERATION',
    'OPERATION',
    'XOR_OPERATOR',
    'OR_OPERATOR',
    'AND_OPERATOR',
    'COMPARATOR',
    'STRING',
    'SINGLE_STRING',
    'DOUBLE_STRING',
    'BOOL',
    'NULL',
    'FUNCTION_NAME',
    'IDENTIFIER',
    'DATE',
    'INTEGER',
    'FLOAT',
    'WS',
    'COMMENT'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'('",
    "')'",
    "'SORT'",
    "'ORDER'",
    "'BY'",
    "','",
    "'LIMIT'",
    "'.'",
    "'?'",
    "'['",
    "']'",
    "':'",
    undefined,
    undefined,
    undefined,
    undefined,
    "'XOR'",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'null'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'ORDER',
    'OPERATOR',
    'PRIO_OPERATION',
    'OPERATION',
    'XOR_OPERATOR',
    'OR_OPERATOR',
    'AND_OPERATOR',
    'COMPARATOR',
    'STRING',
    'SINGLE_STRING',
    'DOUBLE_STRING',
    'BOOL',
    'NULL',
    'FUNCTION_NAME',
    'IDENTIFIER',
    'DATE',
    'INTEGER',
    'FLOAT',
    'WS',
    'COMMENT'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    SPLLexer._LITERAL_NAMES,
    SPLLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return SPLLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(SPLLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'SPL.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return SPLLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return SPLLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return SPLLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return SPLLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02"\u010A\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x03\x02' +
    '\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05' +
    '\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07' +
    '\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03' +
    '\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E' +
    '\x03\x0E\x03\x0E\x05\x0Eo\n\x0E\x03\x0F\x03\x0F\x03\x0F\x05\x0Ft\n\x0F' +
    '\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13' +
    '\x03\x13\x03\x13\x03\x13\x05\x13\x82\n\x13\x03\x14\x03\x14\x03\x14\x03' +
    '\x14\x03\x14\x05\x14\x89\n\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15' +
    '\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15' +
    '\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15' +
    '\x05\x15\xA2\n\x15\x03\x16\x03\x16\x05\x16\xA6\n\x16\x03\x17\x03\x17\x06' +
    '\x17\xAA\n\x17\r\x17\x0E\x17\xAB\x03\x17\x03\x17\x03\x18\x03\x18\x06\x18' +
    '\xB2\n\x18\r\x18\x0E\x18\xB3\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03' +
    '\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\xC1\n\x19\x03\x1A' +
    '\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x07\x1B\xCA\n\x1B\f\x1B' +
    '\x0E\x1B\xCD\v\x1B\x03\x1C\x03\x1C\x07\x1C\xD1\n\x1C\f\x1C\x0E\x1C\xD4' +
    '\v\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D' +
    '\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x07\x1E\xE4\n\x1E\f\x1E' +
    '\x0E\x1E\xE7\v\x1E\x05\x1E\xE9\n\x1E\x03\x1F\x07\x1F\xEC\n\x1F\f\x1F\x0E' +
    '\x1F\xEF\v\x1F\x03\x1F\x03\x1F\x07\x1F\xF3\n\x1F\f\x1F\x0E\x1F\xF6\v\x1F' +
    '\x03 \x06 \xF9\n \r \x0E \xFA\x03 \x03 \x03!\x03!\x07!\u0101\n!\f!\x0E' +
    '!\u0104\v!\x03!\x05!\u0107\n!\x03!\x03!\x03\u0102\x02\x02"\x03\x02\x03' +
    '\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02' +
    '\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F' +
    "\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18" +
    '/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ' +
    "?\x02!A\x02\"\x03\x02\r\x05\x02'',,11\x04\x02--//\x03\x02))\x03\x02" +
    '$$\x03\x02C\\\x04\x02C\\c|\x06\x022;C\\aac|\x03\x022;\x03\x023;\x05\x02' +
    '\v\f\x0F\x0F""\x03\x03\f\f\x02\u0121\x02\x03\x03\x02\x02\x02\x02\x05' +
    '\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03' +
    '\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03' +
    '\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03' +
    '\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03' +
    '\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02' +
    "\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02" +
    '\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03' +
    '\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02' +
    '\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02' +
    '?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x03C\x03\x02\x02\x02\x05E\x03\x02' +
    '\x02\x02\x07G\x03\x02\x02\x02\tL\x03\x02\x02\x02\vR\x03\x02\x02\x02\r' +
    'U\x03\x02\x02\x02\x0FW\x03\x02\x02\x02\x11]\x03\x02\x02\x02\x13_\x03\x02' +
    '\x02\x02\x15a\x03\x02\x02\x02\x17c\x03\x02\x02\x02\x19e\x03\x02\x02\x02' +
    '\x1Bn\x03\x02\x02\x02\x1Ds\x03\x02\x02\x02\x1Fu\x03\x02\x02\x02!w\x03' +
    "\x02\x02\x02#y\x03\x02\x02\x02%\x81\x03\x02\x02\x02'\x88\x03\x02\x02" +
    '\x02)\xA1\x03\x02\x02\x02+\xA5\x03\x02\x02\x02-\xA7\x03\x02\x02\x02/\xAF' +
    '\x03\x02\x02\x021\xC0\x03\x02\x02\x023\xC2\x03\x02\x02\x025\xC7\x03\x02' +
    '\x02\x027\xCE\x03\x02\x02\x029\xD5\x03\x02\x02\x02;\xE8\x03\x02\x02\x02' +
    '=\xED\x03\x02\x02\x02?\xF8\x03\x02\x02\x02A\xFE\x03\x02\x02\x02CD\x07' +
    '*\x02\x02D\x04\x03\x02\x02\x02EF\x07+\x02\x02F\x06\x03\x02\x02\x02GH\x07' +
    'U\x02\x02HI\x07Q\x02\x02IJ\x07T\x02\x02JK\x07V\x02\x02K\b\x03\x02\x02' +
    '\x02LM\x07Q\x02\x02MN\x07T\x02\x02NO\x07F\x02\x02OP\x07G\x02\x02PQ\x07' +
    'T\x02\x02Q\n\x03\x02\x02\x02RS\x07D\x02\x02ST\x07[\x02\x02T\f\x03\x02' +
    '\x02\x02UV\x07.\x02\x02V\x0E\x03\x02\x02\x02WX\x07N\x02\x02XY\x07K\x02' +
    '\x02YZ\x07O\x02\x02Z[\x07K\x02\x02[\\\x07V\x02\x02\\\x10\x03\x02\x02\x02' +
    ']^\x070\x02\x02^\x12\x03\x02\x02\x02_`\x07A\x02\x02`\x14\x03\x02\x02\x02' +
    'ab\x07]\x02\x02b\x16\x03\x02\x02\x02cd\x07_\x02\x02d\x18\x03\x02\x02\x02' +
    'ef\x07<\x02\x02f\x1A\x03\x02\x02\x02gh\x07C\x02\x02hi\x07U\x02\x02io\x07' +
    'E\x02\x02jk\x07F\x02\x02kl\x07G\x02\x02lm\x07U\x02\x02mo\x07E\x02\x02' +
    "ng\x03\x02\x02\x02nj\x03\x02\x02\x02o\x1C\x03\x02\x02\x02pt\x05'\x14" +
    '\x02qt\x05%\x13\x02rt\x05#\x12\x02sp\x03\x02\x02\x02sq\x03\x02\x02\x02' +
    'sr\x03\x02\x02\x02t\x1E\x03\x02\x02\x02uv\t\x02\x02\x02v \x03\x02\x02' +
    '\x02wx\t\x03\x02\x02x"\x03\x02\x02\x02yz\x07Z\x02\x02z{\x07Q\x02\x02' +
    '{|\x07T\x02\x02|$\x03\x02\x02\x02}~\x07~\x02\x02~\x82\x07~\x02\x02\x7F' +
    '\x80\x07Q\x02\x02\x80\x82\x07T\x02\x02\x81}\x03\x02\x02\x02\x81\x7F\x03' +
    '\x02\x02\x02\x82&\x03\x02\x02\x02\x83\x84\x07(\x02\x02\x84\x89\x07(\x02' +
    '\x02\x85\x86\x07C\x02\x02\x86\x87\x07P\x02\x02\x87\x89\x07F\x02\x02\x88' +
    '\x83\x03\x02\x02\x02\x88\x85\x03\x02\x02\x02\x89(\x03\x02\x02\x02\x8A' +
    '\xA2\x04>?\x02\x8B\x8C\x07>\x02\x02\x8C\xA2\x07?\x02\x02\x8D\x8E\x07@' +
    '\x02\x02\x8E\xA2\x07?\x02\x02\x8F\xA2\x07@\x02\x02\x90\x91\x07#\x02\x02' +
    '\x91\xA2\x07?\x02\x02\x92\x93\x07E\x02\x02\x93\x94\x07Q\x02\x02\x94\x95' +
    '\x07P\x02\x02\x95\x96\x07V\x02\x02\x96\x97\x07C\x02\x02\x97\x98\x07K\x02' +
    '\x02\x98\x99\x07P\x02\x02\x99\xA2\x07U\x02\x02\x9A\x9B\x07K\x02\x02\x9B' +
    '\xA2\x07P\x02\x02\x9C\x9D\x07K\x02\x02\x9D\x9E\x07N\x02\x02\x9E\x9F\x07' +
    'K\x02\x02\x9F\xA0\x07M\x02\x02\xA0\xA2\x07G\x02\x02\xA1\x8A\x03\x02\x02' +
    '\x02\xA1\x8B\x03\x02\x02\x02\xA1\x8D\x03\x02\x02\x02\xA1\x8F\x03\x02\x02' +
    '\x02\xA1\x90\x03\x02\x02\x02\xA1\x92\x03\x02\x02\x02\xA1\x9A\x03\x02\x02' +
    '\x02\xA1\x9C\x03\x02\x02\x02\xA2*\x03\x02\x02\x02\xA3\xA6\x05-\x17\x02' +
    '\xA4\xA6\x05/\x18\x02\xA5\xA3\x03\x02\x02\x02\xA5\xA4\x03\x02\x02\x02' +
    '\xA6,\x03\x02\x02\x02\xA7\xA9\x07)\x02\x02\xA8\xAA\n\x04\x02\x02\xA9\xA8' +
    '\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAB\xAC' +
    '\x03\x02\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD\xAE\x07)\x02\x02\xAE.\x03' +
    '\x02\x02\x02\xAF\xB1\x07$\x02\x02\xB0\xB2\n\x05\x02\x02\xB1\xB0\x03\x02' +
    '\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB1\x03\x02\x02\x02\xB3\xB4\x03\x02' +
    '\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5\xB6\x07$\x02\x02\xB60\x03\x02\x02' +
    '\x02\xB7\xB8\x07v\x02\x02\xB8\xB9\x07t\x02\x02\xB9\xBA\x07w\x02\x02\xBA' +
    '\xC1\x07g\x02\x02\xBB\xBC\x07h\x02\x02\xBC\xBD\x07c\x02\x02\xBD\xBE\x07' +
    'n\x02\x02\xBE\xBF\x07u\x02\x02\xBF\xC1\x07g\x02\x02\xC0\xB7\x03\x02\x02' +
    '\x02\xC0\xBB\x03\x02\x02\x02\xC12\x03\x02\x02\x02\xC2\xC3\x07p\x02\x02' +
    '\xC3\xC4\x07w\x02\x02\xC4\xC5\x07n\x02\x02\xC5\xC6\x07n\x02\x02\xC64\x03' +
    '\x02\x02\x02\xC7\xCB\t\x06\x02\x02\xC8\xCA\t\x06\x02\x02\xC9\xC8\x03\x02' +
    '\x02\x02\xCA\xCD\x03\x02\x02\x02\xCB\xC9\x03\x02\x02\x02\xCB\xCC\x03\x02' +
    '\x02\x02\xCC6\x03\x02\x02\x02\xCD\xCB\x03\x02\x02\x02\xCE\xD2\t\x07\x02' +
    '\x02\xCF\xD1\t\b\x02\x02\xD0\xCF\x03\x02\x02\x02\xD1\xD4\x03\x02\x02\x02' +
    '\xD2\xD0\x03\x02\x02\x02\xD2\xD3\x03\x02\x02\x02\xD38\x03\x02\x02\x02' +
    '\xD4\xD2\x03\x02\x02\x02\xD5\xD6\t\t\x02\x02\xD6\xD7\t\t\x02\x02\xD7\xD8' +
    '\t\t\x02\x02\xD8\xD9\t\t\x02\x02\xD9\xDA\x07/\x02\x02\xDA\xDB\t\t\x02' +
    '\x02\xDB\xDC\t\t\x02\x02\xDC\xDD\x07/\x02\x02\xDD\xDE\t\t\x02\x02\xDE' +
    '\xDF\t\t\x02\x02\xDF:\x03\x02\x02\x02\xE0\xE9\x072\x02\x02\xE1\xE5\t\n' +
    '\x02\x02\xE2\xE4\t\t\x02\x02\xE3\xE2\x03\x02\x02\x02\xE4\xE7\x03\x02\x02' +
    '\x02\xE5\xE3\x03\x02\x02\x02\xE5\xE6\x03\x02\x02\x02\xE6\xE9\x03\x02\x02' +
    '\x02\xE7\xE5\x03\x02\x02\x02\xE8\xE0\x03\x02\x02\x02\xE8\xE1\x03\x02\x02' +
    '\x02\xE9<\x03\x02\x02\x02\xEA\xEC\t\t\x02\x02\xEB\xEA\x03\x02\x02\x02' +
    '\xEC\xEF\x03\x02\x02\x02\xED\xEB\x03\x02\x02\x02\xED\xEE\x03\x02\x02\x02' +
    '\xEE\xF0\x03\x02\x02\x02\xEF\xED\x03\x02\x02\x02\xF0\xF4\x070\x02\x02' +
    '\xF1\xF3\t\t\x02\x02\xF2\xF1\x03\x02\x02\x02\xF3\xF6\x03\x02\x02\x02\xF4' +
    '\xF2\x03\x02\x02\x02\xF4\xF5\x03\x02\x02\x02\xF5>\x03\x02\x02\x02\xF6' +
    '\xF4\x03\x02\x02\x02\xF7\xF9\t\v\x02\x02\xF8\xF7\x03\x02\x02\x02\xF9\xFA' +
    '\x03\x02\x02\x02\xFA\xF8\x03\x02\x02\x02\xFA\xFB\x03\x02\x02\x02\xFB\xFC' +
    '\x03\x02\x02\x02\xFC\xFD\b \x02\x02\xFD@\x03\x02\x02\x02\xFE\u0102\x07' +
    '%\x02\x02\xFF\u0101\v\x02\x02\x02\u0100\xFF\x03\x02\x02\x02\u0101\u0104' +
    '\x03\x02\x02\x02\u0102\u0103\x03\x02\x02\x02\u0102\u0100\x03\x02\x02\x02' +
    '\u0103\u0106\x03\x02\x02\x02\u0104\u0102\x03\x02\x02\x02\u0105\u0107\t' +
    '\f\x02\x02\u0106\u0105\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u0108' +
    '\u0109\b!\x02\x02\u0109B\x03\x02\x02\x02\x15\x02ns\x81\x88\xA1\xA5\xAB' +
    '\xB3\xC0\xCB\xD2\xE5\xE8\xED\xF4\xFA\u0102\u0106\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!SPLLexer.__ATN) {
      SPLLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SPLLexer._serializedATN))
    }

    return SPLLexer.__ATN
  }
}
